from create_bot import dp, bot, db, check_sub_channels
from db import Database
from aiogram import types, Dispatcher
from states import FSMWelcome
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards import welcome_btn as btn
from keyboards import client_btn as nav
from keyboards import check_subscribe_btn as navs
import config as con
import datetime

# @dp.message_handler(commands = ['start'], state = None)
async def start(message: types.Message):
    if message.chat.type == 'private':
        if(not db.user_exists(message.from_user.id)):
                if await check_sub_channels(con.CHANNELS, message.from_user.id):
                    db.null_block(message.from_user.id)
                    db.add_user(message.from_user.id)
                    db.null_like_dislike(message.from_user.id)
                    db.set_data(message.from_user.id, datetime.datetime.now())
                    await FSMWelcome.name.set()
                    await message.answer(" –ü—Ä–∏–≤–µ—Ç, —è –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç–ë–æ—Ç!")
                    await bot.send_message(message.from_user.id, '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç–∫–∏:')
                    await message.reply('–ö–∞–∫ —è –º–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ?ü§î')

                else:
                    await bot.send_message(message.from_user.id, con.NOT_SUB_MESSAGE, reply_markup=navs.showChannels())
        else:
            if(not db.get_block(message.from_user.id)):
                await message.answer(" –ü—Ä–∏–≤–µ—Ç, —è –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç–ë–æ—Ç!")
                await message.answer(" –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", reply_markup=nav.find_partner)
            else:
                await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")

    else:
        await bot.send_message(message.from_user.id, '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö!')

#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------

# @dp.callback_query_handler(text='edit_questionnaire')
async def edit_questionnaire(callback_query: types.CallbackQuery):
    if db.get_block(callback_query.from_user.id) == 0:
        await FSMWelcome.name.set()
        await bot.send_message(callback_query.from_user.id, '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç–∫–∏:')
        await bot.send_message(callback_query.from_user.id, '–ö–∞–∫ —è –º–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ?ü§î')
    else:
        await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")

#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------

# @dp.message_handler(state=FSMWelcome.name)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        max_length = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
        text = message.text
        if len(text) > max_length:
            await bot.send_photo(message.from_user.id, caption = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!', photo = open('Images/404.png', 'rb'))
            text = text[:max_length]
            data['name'] = text
            # await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤.")
        else:
            data['name'] = text
        db.set_name(message.from_user.id, text)
        await message.answer('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?üîû')
        await FSMWelcome.next()

#----------------------------------------------------------------------------------------------------------------

# @dp.message_handler(state=FSMWelcome.age)
async def load_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        age = int(message.text) if message.text.isdigit() else None
        if age is not None:
            if age < 0 or age > 120:
                await bot.send_photo(message.from_user.id, caption = "–ë—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç '0'.", photo = open('Images/404.png', 'rb'))
                age = "0"
                data['age'] = age
                # await message.reply("–ë—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç '0'.")
            elif len(age) > 3:
                await bot.send_photo(message.from_user.id, caption = "–ë—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç '0'.", photo = open('Images/404.png', 'rb'))
                age = "0"
                data['age'] = age
            else:
                data['age'] = age

        # age = message.text.strip()  # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
        # if not age.isdigit():
        #     formatted_text = "0"
        #     await bot.send_photo(message.from_user.id, caption = '–ë—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç '0'.', photo = open('Images/404.png', 'rb'))
        #     data['age'] = formatted_text
        # else:
        #     data['age'] = age

        db.set_age(message.from_user.id, age)
        await message.answer('üí¨ –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, –∫–æ–≥–æ —Ç—ã –∏—â–µ—à—å, —á–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –∏ —Ç.–¥.')
        await FSMWelcome.next()

#----------------------------------------------------------------------------------------------------------------

# @dp.message_handler(state=FSMWelcome.text)
async def load_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        max_length = 500  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
        text = message.text
        if len(text) > max_length:
            await bot.send_photo(message.from_user.id, caption = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!', photo = open('Images/404.png', 'rb'))
            text = text[:max_length]
            data['text'] = text
            # await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤.")
        else:
            data['text'] = text
        db.set_text(message.from_user.id, text)
        await message.answer('üöª –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:', reply_markup=btn.walcome_markup)
        await FSMWelcome.next()

#----------------------------------------------------------------------------------------------------------------

# @dp.callback_query_handler(text='man', state=FSMWelcome.gender)
async def load_gender_man(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        # data['gender'] = message.text
        data['gender'] = 'üë®–ü–∞—Ä–µ–Ω—å'
        db.set_gender(callback_query.from_user.id, data['gender'])
        await bot.send_message(callback_query.from_user.id, '–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —É–¥–∞—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!')
        await bot.send_message(callback_query.from_user.id, """üìú –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞. –ü—Ä–æ—á—Ç–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
1. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤‚úä
2. –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—åüé≠
3. –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Çüîû
4. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ãüì¢

üìù –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.""", reply_markup=nav.find_partner)
        await state.finish()

# @dp.callback_query_handler(text='woman', state=FSMWelcome.gender)
async def load_gender_woman(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        # data['gender'] = message.text
        data['gender'] = 'üë©–î–µ–≤—É—à–∫–∞'
        db.set_gender(callback_query.from_user.id, data['gender'])
        await bot.send_message(callback_query.from_user.id, '–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —É–¥–∞—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!')
        await bot.send_message(callback_query.from_user.id, """üìú –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞. –ü—Ä–æ—á—Ç–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
1. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤‚úä
2. –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—åüé≠
3. –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Çüîû
4. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ãüì¢

üìù –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.""", reply_markup=nav.find_partner)
        await state.finish()


#----------------------------------------------------------------------------------------------------------------

# # @dp.message_handler(state=FSMWelcome.gender)
# async def load_gender(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         # data['gender'] = message.text
#         db.set_gender(message.from_user.id, data['gender'])
#         await message.answer('–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —É–¥–∞—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!', reply_markup=nav.find_partner)
#         await state.finish()



# # @dp.message_handler(commands=['start'])
# async def start(message: types.Message):
#     if message.chat.type == 'private':
#         if await check_sub_channels(con.CHANNELS, message.from_user.id):
#             await message.answer(" –ü—Ä–∏–≤–µ—Ç, —è –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç–ë–æ—Ç!")
#             await message.answer(" –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", reply_markup=nav.find_partner)
#         else:
#             await bot.send_message(message.from_user.id, con.NOT_SUB_MESSAGE, reply_markup=nav.showChannels())

#----------------------------------------------------------------------------------------------------------------

#–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
def register_handlers_welcome(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'], state = None)
    dp.register_callback_query_handler(edit_questionnaire, text='edit_questionnaire')
    dp.register_message_handler(load_name, state=FSMWelcome.name)
    dp.register_message_handler(load_age, state=FSMWelcome.age)
    dp.register_message_handler(load_text, state=FSMWelcome.text)
    dp.register_callback_query_handler(load_gender_man, text='man', state=FSMWelcome.gender)
    dp.register_callback_query_handler(load_gender_woman, text='woman', state=FSMWelcome.gender)
